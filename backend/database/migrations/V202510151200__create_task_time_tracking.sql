-- Create task time tracking table for automatic time tracking
CREATE TABLE syncup.task_time_tracking (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  task_id      BIGINT NOT NULL REFERENCES syncup.tasks(id) ON DELETE CASCADE,
  user_id      BIGINT NOT NULL REFERENCES syncup.users(id) ON DELETE CASCADE,
  started_at   TIMESTAMPTZ,
  completed_at TIMESTAMPTZ,
  total_hours  DECIMAL(10,2),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  
  -- Ensure one tracking record per task-user combination
  CONSTRAINT task_time_tracking_unique UNIQUE (task_id, user_id)
);

-- Add indexes for efficient querying
CREATE INDEX idx_task_time_tracking_task_id ON syncup.task_time_tracking (task_id);
CREATE INDEX idx_task_time_tracking_user_id ON syncup.task_time_tracking (user_id);
CREATE INDEX idx_task_time_tracking_started_at ON syncup.task_time_tracking (started_at);
CREATE INDEX idx_task_time_tracking_completed_at ON syncup.task_time_tracking (completed_at);

-- Add trigger for updated_at
CREATE TRIGGER task_time_tracking_updated_at
  BEFORE UPDATE ON syncup.task_time_tracking
  FOR EACH ROW
  EXECUTE FUNCTION set_updated_at();

-- Add index on users department for efficient department filtering
CREATE INDEX IF NOT EXISTS idx_users_department ON syncup.users (department);

-- Add index on tasks status for efficient status filtering
CREATE INDEX IF NOT EXISTS idx_tasks_status ON syncup.tasks (status);

