-- Create notifications table
CREATE TABLE notifications (
    notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author_id BIGINT NOT NULL,
    target_id BIGINT NOT NULL,
    notification_type VARCHAR(50) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    read_status BOOLEAN NOT NULL DEFAULT FALSE,
    dismissed_status BOOLEAN NOT NULL DEFAULT FALSE,
    priority VARCHAR(20) NOT NULL DEFAULT 'MEDIUM',
    link VARCHAR(500),
    metadata JSON,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    read_at TIMESTAMP WITH TIME ZONE,
    dismissed_at TIMESTAMP WITH TIME ZONE
);

-- Create notification_channels table for many-to-many relationship
CREATE TABLE notification_channels (
    notification_id BIGINT NOT NULL,
    channel VARCHAR(50) NOT NULL,
    PRIMARY KEY (notification_id, channel),
    CONSTRAINT fk_notification_channels_notification 
        FOREIGN KEY (notification_id) REFERENCES notifications(notification_id) 
        ON DELETE CASCADE
);

-- Create indexes for performance
CREATE INDEX idx_notifications_target_id ON notifications(target_id);
CREATE INDEX idx_notifications_target_created ON notifications(target_id, created_at DESC);
CREATE INDEX idx_notifications_target_unread ON notifications(target_id, read_status) WHERE read_status = FALSE;
CREATE INDEX idx_notifications_target_active ON notifications(target_id, dismissed_status) WHERE dismissed_status = FALSE;
CREATE INDEX idx_notifications_type ON notifications(notification_type);
CREATE INDEX idx_notifications_priority ON notifications(priority);
CREATE INDEX idx_notifications_created_at ON notifications(created_at);

-- Create composite indexes for common queries
CREATE INDEX idx_notifications_target_type_created ON notifications(target_id, notification_type, created_at DESC);
CREATE INDEX idx_notifications_author_target_type_created ON notifications(author_id, target_id, notification_type, created_at DESC);

-- Add foreign key constraints (assuming user table exists)
-- ALTER TABLE notifications ADD CONSTRAINT fk_notifications_author 
--     FOREIGN KEY (author_id) REFERENCES users(user_id);
-- ALTER TABLE notifications ADD CONSTRAINT fk_notifications_target 
--     FOREIGN KEY (target_id) REFERENCES users(user_id);

-- Add check constraints
ALTER TABLE notifications ADD CONSTRAINT chk_notification_type
    CHECK (notification_type IN (
        'COMMENT_ADDED', 'MENTION', 'COMMENT_REPLY',
        'TASK_ASSIGNED', 'TASK_COMPLETED', 'TASK_DEADLINE_APPROACHING',
        'PROJECT_INVITE', 'PROJECT_MEMBER_JOINED', 'PROJECT_DEADLINE_APPROACHING',
        'USER_REGISTERED', 'PASSWORD_RESET_REQUESTED',
        'SYSTEM_MAINTENANCE', 'SECURITY_ALERT'
    ));

ALTER TABLE notifications ADD CONSTRAINT chk_priority
    CHECK (priority IN ('LOW', 'MEDIUM', 'HIGH', 'URGENT'));

-- Add trigger to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_notification_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_notifications_updated_at
    BEFORE UPDATE ON notifications
    FOR EACH ROW
    EXECUTE FUNCTION update_notification_updated_at();

-- Add comments for documentation
COMMENT ON TABLE notifications IS 'Stores all user notifications for the application';
COMMENT ON COLUMN notifications.notification_id IS 'Primary key for the notification';
COMMENT ON COLUMN notifications.author_id IS 'ID of the user who triggered the notification';
COMMENT ON COLUMN notifications.target_id IS 'ID of the user who will receive the notification';
COMMENT ON COLUMN notifications.notification_type IS 'Type of notification (MENTION, TASK_ASSIGNED, etc.)';
COMMENT ON COLUMN notifications.subject IS 'Short subject line for the notification';
COMMENT ON COLUMN notifications.message IS 'Full notification message content';
COMMENT ON COLUMN notifications.read_status IS 'Whether the notification has been read by the target user';
COMMENT ON COLUMN notifications.dismissed_status IS 'Whether the notification has been dismissed by the target user';
COMMENT ON COLUMN notifications.priority IS 'Priority level of the notification';
COMMENT ON COLUMN notifications.link IS 'Optional link to the related content';
COMMENT ON COLUMN notifications.metadata IS 'Additional metadata in JSON format';
COMMENT ON COLUMN notifications.created_at IS 'Timestamp when the notification was created';
COMMENT ON COLUMN notifications.updated_at IS 'Timestamp when the notification was last updated';
COMMENT ON COLUMN notifications.read_at IS 'Timestamp when the notification was marked as read';
COMMENT ON COLUMN notifications.dismissed_at IS 'Timestamp when the notification was dismissed';

COMMENT ON TABLE notification_channels IS 'Stores the delivery channels for each notification';
COMMENT ON COLUMN notification_channels.notification_id IS 'Reference to the notification';
COMMENT ON COLUMN notification_channels.channel IS 'Delivery channel (IN_APP, EMAIL, SMS, etc.)';