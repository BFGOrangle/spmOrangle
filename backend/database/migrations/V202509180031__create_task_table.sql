CREATE TYPE request_status AS ENUM (
  'TODO',
  'IN_PROGRESS',
  'COMPLETED'
);

-- task_types (lookup)
CREATE TABLE syncup.task_types (
  id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR NOT NULL
);

CREATE TABLE syncup.tasks (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id   BIGINT NOT NULL REFERENCES syncup.projects(id),
  owner_id     BIGINT NOT NULL REFERENCES syncup.users(id), -- who created/owns the task
  task_type    INT NOT NULL REFERENCES syncup.task_types(id),
  title        VARCHAR NOT NULL,
  description  TEXT,
  status       request_status NOT NULL DEFAULT 'TODO',
  delete_ind   BOOLEAN,
  created_by   BIGINT NOT NULL REFERENCES syncup.users(id),
  updated_by   BIGINT NOT NULL REFERENCES syncup.users(id),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TRIGGER task_updated_at
  BEFORE UPDATE ON syncup.tasks
  FOR EACH ROW
  EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER task_update_log_trg
  AFTER UPDATE ON syncup.tasks
  FOR EACH ROW 
  EXECUTE FUNCTION log_update();

-- index to speed up project_id lookups
CREATE INDEX idx_tasks_project_id ON syncup.tasks (project_id);

CREATE TABLE syncup.task_assignees (
  task_id     BIGINT NOT NULL,
  user_id     BIGINT NOT NULL,
  assigned_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  assigned_by BIGINT NOT NULL,

  -- one row per (task, user)
  CONSTRAINT task_assignees_pkey PRIMARY KEY (task_id, user_id),

  -- delete assignments when the task/user is removed
  CONSTRAINT task_assignees_task_fk
    FOREIGN KEY (task_id) REFERENCES syncup.tasks(id) ON DELETE CASCADE,
  CONSTRAINT task_assignees_user_fk
    FOREIGN KEY (user_id) REFERENCES syncup.users(id) ON DELETE CASCADE,

  -- keep the audit trail if the assigner account is removed
  CONSTRAINT task_assignees_assigned_by_fk
    FOREIGN KEY (assigned_by) REFERENCES syncup.users(id) ON DELETE RESTRICT
);

CREATE INDEX idx_task_assignees_user_id ON syncup.task_assignees (user_id);

-- task_comments
CREATE TABLE syncup.task_comments (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  task_id           BIGINT NOT NULL REFERENCES syncup.tasks(id)    ON DELETE CASCADE,
  project_id        BIGINT NOT NULL REFERENCES syncup.projects(id) ON DELETE CASCADE,
  details           VARCHAR,
  mentioned_user_id BIGINT NOT NULL REFERENCES syncup.users(id)    ON DELETE RESTRICT,
  created_by        BIGINT NOT NULL REFERENCES syncup.users(id)    ON DELETE RESTRICT,
  updated_by        BIGINT NOT NULL REFERENCES syncup.users(id)    ON DELETE RESTRICT,
  created_at        TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at        TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- subtasks
CREATE TABLE syncup.subtasks (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  task_id     BIGINT NOT NULL REFERENCES syncup.tasks(id)      ON DELETE CASCADE,
  project_id  BIGINT NOT NULL REFERENCES syncup.projects(id)   ON DELETE CASCADE,
  task_type   INT    NOT NULL REFERENCES syncup.task_types(id) ON DELETE RESTRICT,
  title       VARCHAR,
  details     VARCHAR,
  delete_ind  BOOLEAN,
  created_by  BIGINT NOT NULL REFERENCES syncup.users(id)      ON DELETE RESTRICT,
  updated_by  BIGINT NOT NULL REFERENCES syncup.users(id)      ON DELETE RESTRICT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TRIGGER task_update_log_trg
  AFTER UPDATE ON syncup.subtasks
  FOR EACH ROW 
  EXECUTE FUNCTION log_update();

-- files
CREATE TABLE syncup.files (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  task_id     BIGINT NOT NULL REFERENCES syncup.tasks(id)    ON DELETE CASCADE,
  project_id  BIGINT NOT NULL REFERENCES syncup.projects(id) ON DELETE CASCADE,
  file_url    VARCHAR NOT NULL,
  created_by  BIGINT NOT NULL REFERENCES syncup.users(id)    ON DELETE RESTRICT,
  updated_by  BIGINT NOT NULL REFERENCES syncup.users(id)    ON DELETE RESTRICT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_task_comments_project        ON syncup.task_comments (project_id);
CREATE INDEX IF NOT EXISTS idx_task_comments_mentioned_user ON syncup.task_comments (mentioned_user_id);

CREATE INDEX IF NOT EXISTS idx_subtasks_project   ON syncup.subtasks (project_id);
CREATE INDEX IF NOT EXISTS idx_subtasks_task_type ON syncup.subtasks (task_type);

CREATE INDEX IF NOT EXISTS idx_files_project ON syncup.files (project_id);
